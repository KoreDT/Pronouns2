plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(configuration: 'namedElements', path: ':common-modloader')) { transitive false }
    shadowBundle project(configuration: 'transformProductionFabric', path: ':common-modloader')
    common(shadowBundle(project(path: ":common")))
    common(shadowBundle(project(path: ":API")))
}

processResources {
    def props = [
            id: rootProject.modin_id,
            version: project.version,
            name: rootProject.modin_version,
            description: rootProject.modin_description,
            website: rootProject.modin_website,
            issues: rootProject.modin_issues,
            source: rootProject.modin_source
    ]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('fabric.mod.json') {
        expand props
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    destinationDirectory = file("$rootProject.rootDir/output")
}
