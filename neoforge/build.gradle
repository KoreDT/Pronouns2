plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(configuration: 'namedElements', path: ':common-modloader')) { transitive false }
    shadowBundle project(configuration: 'transformProductionNeoForge', path: ':common-modloader')

    common(shadowBundle(project(path: ":common")))
    common(shadowBundle(project(path: ":API")))
}

processResources {
    def props = [
            id: rootProject.modin_id,
            version: project.version,
            name: rootProject.modin_version,
            description: rootProject.modin_description,
            website: rootProject.modin_website,
            issues: rootProject.modin_issues
    ]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('META-INF/neoforge.mods.toml') {
        expand props
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    destinationDirectory = file("$rootProject.rootDir/output")
}
