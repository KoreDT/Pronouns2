plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'JitPack'
        url 'https://jitpack.io'
        content { includeGroup "com.github.Novampr.adventure-platform-fabric" }
    }
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"
    modImplementation include("net.kyori:adventure-platform-neoforge:6.0.0")

    common(project(configuration: 'namedElements', path: ':common-modloader')) { transitive false }
    shadowBundle project(configuration: 'transformProductionNeoForge', path: ':common-modloader')

    common(shadowBundle(project(path: ":common")))
    common(shadowBundle(project(path: ":API")))
    common(shadowBundle("net.kyori:adventure-text-minimessage:4.17.0"))
}

processResources {
    def props = [
            id: rootProject.modin_id,
            version: project.version,
            name: rootProject.modin_version,
            description: rootProject.modin_description,
            website: rootProject.modin_website,
            issues: rootProject.modin_issues,
            license: rootProject.modin_license,
            minecraft: rootProject.minecraft_version,
            neoforge: rootProject.neoforge_version,
            architectury: rootProject.architectury_api_version
    ]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('META-INF/neoforge.mods.toml') {
        expand props
    }
}

jar {
    archiveClassifier = 'dev'
    destinationDirectory = file("$rootProject.rootDir/dev_output")
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
    destinationDirectory = file("$rootProject.rootDir/dev_output")
}

remapJar {
    input.set shadowJar.archiveFile
    destinationDirectory = file("$rootProject.rootDir/output")
}

def vt = "release"
if (version.toString().contains("SNAPSHOT")) {
    vt = "beta"
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "kore-pronouns"
    versionNumber = version
    versionType = vt
    uploadFile = remapJar
    gameVersions = [rootProject.minecraft_version]
    loaders = ["neoforge"]
    dependencies {
        required.project "architectury-api"
    }
}